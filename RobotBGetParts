#Ricardo Silva
#Steven Honores
#P101
from robolink import *    # API to communicate with RoboDK
from robodk import *      # basic matrix operations

# Use RoboDK API as RL
RDK = Robolink()

# define default approach distance
APPROACH = 100
SENSOR_VARIABLE = 'SENSOR' # station variable
VERDES = 'verdes'    #Variable de estacion
ROJAS = 'rojas'      #Variable de estacion
AZULES = 'azules'    #Variable de estacion

# gather robot, tool and reference frames from the station
robot               = RDK.Item('UR10 B', ITEM_TYPE_ROBOT)
tool                = RDK.Item('GripperB', ITEM_TYPE_TOOL)
#frame_pallet        = RDK.Item('PalletB', ITEM_TYPE_FRAME)      #Aqui se manda la caja al pallet B  !!!!!! Originalmente estaba en PalletB
frame_conv          = RDK.Item('ConveyorReference', ITEM_TYPE_FRAME)
frame_conv_moving   = RDK.Item('MovingRef', ITEM_TYPE_FRAME)

# gather targets
#target_pallet_safe = RDK.Item('PalletApproachB', ITEM_TYPE_TARGET)      #Aqui se manda el target del pallet a dejar la caja !!!!!!!  Originalmente estaba en PalletApproachB
target_conv_safe = RDK.Item('ConvApproachB', ITEM_TYPE_TARGET)
target_conv = RDK.Item('Get Conveyor', ITEM_TYPE_TARGET)

# get variable parameters
SIZE_BOX = RDK.getParam('SizeBox')
SIZE_PALLET = RDK.getParam('SizePallet')
SIZE_BOX_XYZ = [float(x.replace(' ','')) for x in SIZE_BOX.split(',')]
SIZE_PALLET_XYZ = [float(x.replace(' ','')) for x in SIZE_PALLET.split(',')]
SIZE_BOX_Z = SIZE_BOX_XYZ[2] # the height of the boxes is important to take into account when approaching the positions

def box_calc(size_xyz, pallet_xyz):
    """Calculates a list of points to store parts in a pallet"""
    [size_x, size_y, size_z] = size_xyz
    [pallet_x, pallet_y, pallet_z] = pallet_xyz    
    xyz_list = []
    for h in range(int(pallet_z)):
        for j in range(int(pallet_y)):
            for i in range(int(pallet_x)):
                xyz_list = xyz_list + [[(i+0.5)*size_x, (j+0.5)*size_y, (h+0.5)*size_z]]
    return xyz_list

def TCP_On(toolitem):
    """Attaches the closest object to the toolitem Htool pose,
    It will also output appropriate function calls on the generated robot program (call to TCP_On)"""
    toolitem.AttachClosest()
    toolitem.RDK().RunMessage('Set air valve on')
    toolitem.RDK().RunProgram('TCP_On()');
        
def TCP_Off(toolitem, itemleave=0):
    """Detaches the closest object attached to the toolitem Htool pose,
    It will also output appropriate function calls on the generated robot program (call to TCP_Off)"""
    #toolitem.DetachClosest(itemleave)
    toolitem.DetachAll(itemleave)
    toolitem.RDK().RunMessage('Set air valve off')
    toolitem.RDK().RunProgram('TCP_Off()');

# calculate an array of positions to get/store the parts
parts_positions = box_calc(SIZE_BOX_XYZ, SIZE_PALLET_XYZ)

# Calculate a new TCP that takes into account the size of the part (targets are set to the center of the box)
tool_xyzrpw = tool.PoseTool()*transl(0,0,SIZE_BOX_Z/2)
tool_tcp = robot.AddTool(tool_xyzrpw, 'TCP B')

# ---------------------------------------------------------------------------------
# -------------------------- PROGRAM START ----------------------------------------

def WaitSensor():
    if RDK.RunMode() == RUNMODE_SIMULATE:
        # Simulate the sensor by waiting for the SENSOR status to turn to 1 (object present)
        while RDK.getParam(SENSOR_VARIABLE) == 0:
            pause(0.001)
    else:
        RDK.RunProgram('WaitSensor')
    print("Part detected")
    print('R',RDK.getParam(ROJAS))  #!!!
    print('A',RDK.getParam(AZULES))    #!!!!
    print('V',RDK.getParam(VERDES))    #!!!!!
    #-------------determinar a que pallet el robot llevara la caja por su color------------      #aqui se hace la validacion de que color es  RDK.getParam(VERDES)==1

def DecidirPallet():     #Funcion creada para organizar las cajas por colores
    frame_pallet = RDK.Item('PalletR', ITEM_TYPE_FRAME)  #por default
    target_pallet_safe = RDK.Item('PalletApproachR', ITEM_TYPE_TARGET)   #por default
    if RDK.getParam(ROJAS) == 1.0:  #rojo
        frame_pallet = RDK.Item('PalletR', ITEM_TYPE_FRAME)
        target_pallet_safe = RDK.Item('PalletApproachR', ITEM_TYPE_TARGET)   

    elif RDK.getParam(VERDES) == 1.0:  #verde
        frame_pallet = RDK.Item('PalletG', ITEM_TYPE_FRAME)
        target_pallet_safe = RDK.Item('PalletApproachG', ITEM_TYPE_TARGET)
        
    elif RDK.getParam(AZULES) == 1.0:  #azul
        frame_pallet = RDK.Item('PalletB', ITEM_TYPE_FRAME)
        target_pallet_safe = RDK.Item('PalletApproachB', ITEM_TYPE_TARGET)
    
    return frame_pallet,target_pallet_safe

robot.setPoseTool(tool_tcp)
nparts = len(parts_positions)
i = 0    
irojo = 0
iazul = 0
iverde = 0
x = 0

while i < nparts:

    # ----------- place the box i on the convegor ------
    # approach to the conveyor
    robot.setPoseFrame(frame_conv)
    target_conv_pose = target_conv.Pose()*transl(0,0,-SIZE_BOX_Z/2)
    target_conv_app = target_conv_pose*transl(0,0,-APPROACH)
    robot.MoveJ(target_conv_safe)
    robot.MoveJ(target_conv_app)
    WaitSensor()
    frame_pallet,target_pallet_safe=DecidirPallet()   #Aqui se valida la funcion que determina el pallet a colocar la caja por su color
    robot.MoveL(target_conv_pose)
    TCP_On(tool) # detach an place the object in the moving reference frame of the conveyor
    robot.MoveL(target_conv_app)
    robot.MoveJ(target_conv_safe)

    if frame_pallet == RDK.Item('PalletB', ITEM_TYPE_FRAME):
        x = iazul
        iazul= iazul + 1
    elif frame_pallet == RDK.Item('PalletG', ITEM_TYPE_FRAME):
        x = iverde
        iverde= iverde + 1
    elif frame_pallet == RDK.Item('PalletR', ITEM_TYPE_FRAME):
        x = irojo
        irojo= irojo + 1
        


    # ----------- take a part from the conveyor ------
    # get the xyz position of part i
    robot.setPoseFrame(frame_pallet)     
    part_position_i = parts_positions[x]      
    target_i = transl(part_position_i)*rotx(pi)
    target_i_app = target_i * transl(0,0,-(APPROACH+SIZE_BOX_Z))    
    # approach to the pallet
    robot.MoveJ(target_pallet_safe)   
    # get the box i
    robot.MoveJ(target_i_app)
    robot.MoveL(target_i)
    TCP_Off(tool, frame_pallet) # attach the closest part  
    robot.MoveL(target_i_app)
    robot.MoveJ(target_pallet_safe)      

    i = i + 1     
